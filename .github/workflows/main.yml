name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  CONTAINER_REGISTRY_URL: "${{ vars.CONTAINER_REGISTRY_URL }}"
  CONTAINER_REGISTRY_USER: "${{ vars.CONTAINER_REGISTRY_USER }}"
  CONTAINER_REGISTRY_PASSWORD: "${{ secrets.CONTAINER_REGISTRY_PASSWORD }}"

jobs:
  test:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install pytest-cov
    
    - name: Download ZIP
      run: |
        curl -o file.zip https://mediaops-public.s3.us-east-1.amazonaws.com/at-bootcamp/testsimages.zip

    - name: Unzip ZIP
      run: |
        mkdir -p uploads/Filexample/
        unzip -j file.zip "testsimages/*" -d uploads/Filexample/

    - name: Verify folder content
      run: |
        ls -la uploads/Filexample/

    - name: Run unit tests and check code coverage
      run: |
        python3 -m pytest --cov=models/Recognizer --cov=routes --cov=utils --cov-report=term --cov-report=xml tests/models_tests/ tests/routes_tests/ tests/utils_tests/

    - name: Run SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v4.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{vars.SONAR_HOST_URL}}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=MLService
          -Dsonar.python.coverage.reportPaths=coverage.xml

    - name: Quality Gate
      id: sonarqube
      uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{vars.SONAR_HOST_URL}}
  
  build_push_image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build docker image
        run: docker compose build 
      
      - name: Add docker daemon file
        run: |
          echo '{ "insecure-registries": ["$CONTAINER_REGISTRY_URL"] }' | sudo tee /etc/docker/daemon.json
          sudo cat /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: LogIn to Nexus Container Registry
        run: echo $CONTAINER_REGISTRY_PASSWORD | docker login $CONTAINER_REGISTRY_URL -u $CONTAINER_REGISTRY_USER --password-stdin

      - name: Push Docker Image
        run: |
          docker tag mlservice-api $CONTAINER_REGISTRY_URL/api-ml:${{ github.run_number}}
          docker push $CONTAINER_REGISTRY_URL/api-ml:${{ github.run_number}}